#!/bin/bash

# Script de inicio mejorado para el Sistema POS de Cafeter√≠a L'Bandito
# Incluye b√∫squeda de clientes y gesti√≥n de mesas

echo "üöÄ Iniciando Sistema POS Mejorado - Cafeter√≠a L'Bandito"
echo "========================================================"

# Verificar si PostgreSQL est√° corriendo
if ! pgrep -x "postgres" > /dev/null; then
    echo "‚ùå PostgreSQL no est√° corriendo. Por favor, inicia PostgreSQL primero."
    exit 1
fi

# Verificar conexi√≥n a la base de datos
if ! psql -U patriciozepeda -d cafeteria_l_bandito -c "SELECT 1;" > /dev/null 2>&1; then
    echo "‚ùå No se puede conectar a la base de datos cafeteria_l_bandito"
    echo "   Verifica que la base de datos existe y las credenciales son correctas"
    exit 1
fi

echo "‚úÖ Base de datos conectada correctamente"

# Verificar que las tablas necesarias existen
echo "üîç Verificando estructura de base de datos..."

# Verificar tabla mesas
if psql -U patriciozepeda -d cafeteria_l_bandito -c "SELECT COUNT(*) FROM mesas;" > /dev/null 2>&1; then
    MESA_COUNT=$(psql -U patriciozepeda -d cafeteria_l_bandito -t -c "SELECT COUNT(*) FROM mesas;" | xargs)
    echo "‚úÖ Tabla mesas: $MESA_COUNT mesas disponibles"
else
    echo "‚ö†Ô∏è  Tabla mesas no encontrada. Creando..."
    psql -U patriciozepeda -d cafeteria_l_bandito -c "
        CREATE TABLE IF NOT EXISTS mesas (
            mesa_id SERIAL PRIMARY KEY,
            numero VARCHAR(10) UNIQUE NOT NULL,
            capacidad INTEGER NOT NULL DEFAULT 4,
            ubicacion VARCHAR(100),
            estado VARCHAR(20) DEFAULT 'disponible' CHECK (estado IN ('disponible', 'ocupada', 'reservada', 'fuera_servicio')),
            activa BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        INSERT INTO mesas (numero, capacidad, ubicacion, estado) VALUES 
        ('1', 2, 'Ventana', 'disponible'),
        ('2', 4, 'Centro', 'disponible'),
        ('3', 4, 'Centro', 'disponible'),
        ('4', 6, 'Terraza', 'disponible'),
        ('5', 2, 'Barra', 'disponible'),
        ('6', 4, 'Ventana', 'disponible'),
        ('7', 8, 'Sal√≥n Principal', 'disponible'),
        ('8', 4, 'Centro', 'disponible'),
        ('9', 2, 'Rinc√≥n', 'disponible'),
        ('10', 6, 'Terraza', 'disponible')
        ON CONFLICT (numero) DO NOTHING;
    " > /dev/null 2>&1
    echo "‚úÖ Tabla mesas creada con 10 mesas iniciales"
fi

# Verificar productos
PRODUCT_COUNT=$(psql -U patriciozepeda -d cafeteria_l_bandito -t -c "SELECT COUNT(*) FROM productos WHERE disponible = true;" | xargs)
echo "‚úÖ Productos disponibles: $PRODUCT_COUNT"

# Verificar usuarios
USER_COUNT=$(psql -U patriciozepeda -d cafeteria_l_bandito -t -c "SELECT COUNT(*) FROM usuarios WHERE activo = true;" | xargs)
echo "‚úÖ Usuarios registrados: $USER_COUNT"

echo ""
echo "üîß Iniciando servicios..."

# Funci√≥n para verificar si un puerto est√° en uso
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null ; then
        return 0
    else
        return 1
    fi
}

# Iniciar Backend
echo "üîô Iniciando Backend (Puerto 3000)..."
if check_port 3000; then
    echo "‚ö†Ô∏è  Puerto 3000 ya est√° en uso. Deteniendo proceso anterior..."
    pkill -f "node.*backend" 2>/dev/null || true
    sleep 2
fi

cd backend
npm start > ../logs/backend.log 2>&1 &
BACKEND_PID=$!
cd ..

# Esperar a que el backend est√© listo
echo "‚è≥ Esperando que el backend est√© listo..."
for i in {1..30}; do
    if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
        echo "‚úÖ Backend listo en http://localhost:3000"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Backend no responde despu√©s de 30 segundos"
        exit 1
    fi
    sleep 1
done

# Iniciar Frontend
echo "üé® Iniciando Frontend (Puerto 5174)..."
if check_port 5174; then
    echo "‚ö†Ô∏è  Puerto 5174 ya est√° en uso. Deteniendo proceso anterior..."
    pkill -f "vite.*frontend" 2>/dev/null || true
    sleep 2
fi

cd frontend
npm run dev > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# Esperar a que el frontend est√© listo
echo "‚è≥ Esperando que el frontend est√© listo..."
for i in {1..30}; do
    if curl -s http://localhost:5174 > /dev/null 2>&1; then
        echo "‚úÖ Frontend listo en http://localhost:5174"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Frontend no responde despu√©s de 30 segundos"
        exit 1
    fi
    sleep 1
done

echo ""
echo "üéâ ¬°Sistema POS Mejorado iniciado exitosamente!"
echo "=============================================="
echo ""
echo "üì± ACCESOS PRINCIPALES:"
echo "   üåê Aplicaci√≥n Web: http://localhost:5174"
echo "   üîß API Backend:    http://localhost:3000"
echo "   üìö Documentaci√≥n:  http://localhost:3000/api-docs"
echo ""
echo "üë• CREDENCIALES DE ACCESO:"
echo "   üõí Vendedor: vendedor@cafeteria.com / password123"
echo "   üëë Admin:    admin@cafeteria.com / admin123"
echo ""
echo "üÜï NUEVAS FUNCIONALIDADES:"
echo "   üîç B√∫squeda inteligente de clientes"
echo "   ü™ë Gesti√≥n visual de mesas"
echo "   üë§ Creaci√≥n r√°pida de clientes"
echo "   üìä Carrito mejorado con informaci√≥n completa"
echo "   üéØ Selecci√≥n de tipo de pedido (Local/Delivery/Takeaway)"
echo ""
echo "üè™ GESTI√ìN DE MESAS:"
echo "   ‚úÖ Disponible  üî¥ Ocupada  üü° Reservada  üö´ Fuera de servicio"
echo "   üìç Ubicaciones: Ventana, Centro, Terraza, Barra, Sal√≥n Principal, Rinc√≥n"
echo ""
echo "üîß ENDPOINTS API NUEVOS:"
echo "   GET  /api/mesas              - Listar todas las mesas"
echo "   GET  /api/mesas/disponibles  - Mesas disponibles"
echo "   GET  /api/usuarios/buscar    - Buscar clientes"
echo "   POST /api/mesas              - Crear nueva mesa"
echo ""
echo "üìã FLUJO DE TRABAJO MEJORADO:"
echo "   1. üîç Buscar o crear cliente"
echo "   2. ü™ë Seleccionar mesa (para pedidos locales)"
echo "   3. üõí Agregar productos al carrito"
echo "   4. üéØ Elegir tipo de pedido"
echo "   5. üí≥ Procesar pago"
echo "   6. ‚úÖ Confirmar pedido"
echo ""
echo "üìä ESTAD√çSTICAS ACTUALES:"
echo "   üçΩÔ∏è  Productos disponibles: $PRODUCT_COUNT"
echo "   ü™ë Mesas configuradas: $MESA_COUNT"
echo "   üë• Usuarios registrados: $USER_COUNT"
echo ""
echo "üîÑ Para detener el sistema: Ctrl+C"
echo "üìù Logs disponibles en: ./logs/"
echo ""
echo "üí° TIPS:"
echo "   ‚Ä¢ La b√∫squeda de clientes funciona con nombre, apellido, tel√©fono o email"
echo "   ‚Ä¢ Las mesas se actualizan autom√°ticamente seg√∫n disponibilidad"
echo "   ‚Ä¢ Los pedidos de delivery requieren tel√©fono obligatorio"
echo "   ‚Ä¢ El carrito muestra informaci√≥n completa del cliente y mesa"
echo ""

# Crear directorio de logs si no existe
mkdir -p logs

# Funci√≥n para limpiar al salir
cleanup() {
    echo ""
    echo "üõë Deteniendo servicios..."
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    echo "‚úÖ Servicios detenidos"
    exit 0
}

# Capturar se√±al de interrupci√≥n
trap cleanup INT

# Mantener el script corriendo
echo "‚ö° Sistema funcionando... Presiona Ctrl+C para detener"
wait 