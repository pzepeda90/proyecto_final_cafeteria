-- 1) USUARIOS
CREATE TABLE usuarios (
    usuario_id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    telefono VARCHAR(20),
    fecha_nacimiento DATE,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    rol_id INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_usuarios_rol FOREIGN KEY (rol_id) REFERENCES roles(rol_id) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE INDEX idx_usuarios_email ON usuarios(email);

-- 2) DIRECCIONES
CREATE TABLE direcciones (
    direccion_id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL,
    calle VARCHAR(255) NOT NULL,
    numero VARCHAR(50),
    ciudad VARCHAR(100) NOT NULL,
    comuna VARCHAR(100),
    codigo_postal VARCHAR(20),
    pais VARCHAR(50) NOT NULL,
    principal BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_direcciones_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 3) VENDEDORES
CREATE TABLE vendedores (
    vendedor_id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    telefono VARCHAR(20),
    fecha_contratacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_vendedores_email ON vendedores(email);

-- 4) CATEGORIAS
CREATE TABLE categorias (
    categoria_id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    imagen_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 5) PRODUCTOS
CREATE TABLE productos (
    producto_id SERIAL PRIMARY KEY,
    categoria_id INTEGER NOT NULL,
    nombre VARCHAR(150) NOT NULL,
    descripcion TEXT,
    precio DECIMAL NOT NULL,
    imagen_url VARCHAR(255),
    stock INTEGER DEFAULT 0,
    disponible BOOLEAN DEFAULT TRUE,
    vendedor_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_productos_categoria FOREIGN KEY (categoria_id) REFERENCES categorias(categoria_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_productos_vendedor FOREIGN KEY (vendedor_id) REFERENCES vendedores(vendedor_id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX idx_productos_nombre ON productos(nombre);

-- 6) IMAGENES_PRODUCTO
CREATE TABLE imagenes_producto (
    imagen_id SERIAL PRIMARY KEY,
    producto_id INTEGER NOT NULL,
    url VARCHAR(255) NOT NULL,
    descripcion TEXT,
    orden INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_imagenes_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 7) CARRITOS
CREATE TABLE carritos (
    carrito_id SERIAL PRIMARY KEY,
    usuario_id INTEGER UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_carritos_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 8) DETALLES_CARRITO
CREATE TABLE detalles_carrito (
    detalle_carrito_id SERIAL PRIMARY KEY,
    carrito_id INTEGER NOT NULL,
    producto_id INTEGER NOT NULL,
    cantidad INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_detalles_carrito_carrito FOREIGN KEY (carrito_id) REFERENCES carritos(carrito_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_detalles_carrito_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 9) METODOS_PAGO
CREATE TABLE metodos_pago (
    metodo_pago_id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    activo BOOLEAN DEFAULT TRUE
);

-- 10) ESTADOS_PEDIDO
CREATE TABLE estados_pedido (
    estado_pedido_id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT
);

-- 11) PEDIDOS
CREATE TABLE pedidos (
    pedido_id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL,
    fecha_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado_pedido_id INTEGER NOT NULL,
    subtotal DECIMAL NOT NULL,
    impuestos DECIMAL NOT NULL,
    total DECIMAL NOT NULL,
    metodo_pago_id INTEGER NOT NULL,
    direccion_id INTEGER NOT NULL,
    carrito_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_pedidos_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_pedidos_estado FOREIGN KEY (estado_pedido_id) REFERENCES estados_pedido(estado_pedido_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_pedidos_metodo_pago FOREIGN KEY (metodo_pago_id) REFERENCES metodos_pago(metodo_pago_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_pedidos_direccion FOREIGN KEY (direccion_id) REFERENCES direcciones(direccion_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_pedidos_carrito FOREIGN KEY (carrito_id) REFERENCES carritos(carrito_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 12) DETALLES_PEDIDO
CREATE TABLE detalles_pedido (
    detalle_id SERIAL PRIMARY KEY,
    pedido_id INTEGER NOT NULL,
    producto_id INTEGER NOT NULL,
    cantidad INTEGER NOT NULL,
    precio_unitario DECIMAL NOT NULL,
    subtotal DECIMAL NOT NULL,
    CONSTRAINT fk_detalles_pedido_pedido FOREIGN KEY (pedido_id) REFERENCES pedidos(pedido_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_detalles_pedido_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 13) RESEÑAS
CREATE TABLE reseñas (
    reseña_id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL,
    producto_id INTEGER NOT NULL,
    calificacion INTEGER CHECK (calificacion >= 1 AND calificacion <= 5) NOT NULL,
    comentario TEXT,
    fecha_reseña TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_reseñas_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_reseñas_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 14) HISTORIAL_ESTADO_PEDIDO
CREATE TABLE historial_estado_pedido (
    historial_id SERIAL PRIMARY KEY,
    pedido_id INTEGER NOT NULL,
    estado_pedido_id INTEGER NOT NULL,
    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comentario TEXT,
    CONSTRAINT fk_historial_pedido FOREIGN KEY (pedido_id) REFERENCES pedidos(pedido_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_historial_estado FOREIGN KEY (estado_pedido_id) REFERENCES estados_pedido(estado_pedido_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 15) ROLES
CREATE TABLE roles (
    rol_id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_roles_nombre ON roles(nombre);
